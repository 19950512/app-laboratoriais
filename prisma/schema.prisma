generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Business {
  id                 String              @id @default(uuid()) @db.Uuid
  name               String              @db.VarChar(255)
  document           String              @unique @db.VarChar(20)
  logo               String?             @db.VarChar(500)
  active             Boolean             @default(true)
  createdAt          DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime            @updatedAt @map("updated_at") @db.Timestamptz(6)
  accountPreferences AccountPreference[]
  accountRoles       AccountRole[]
  accounts           Account[]
  auditoria          Auditoria[]
  roles              Role[]
  routeRoles         RouteRole[]
  tokensJwt          TokenJwt[]

  @@index([document])
  @@index([active])
  @@map("business")
}

model Account {
  businessId        String             @map("business_id") @db.Uuid
  id                String             @id @default(uuid()) @db.Uuid
  email             String             @db.VarChar(255)
  name              String             @db.VarChar(255)
  photoProfile      String?            @map("photo_profile")
  hashPassword      String             @map("hash_password") @db.VarChar(255)
  isCompanyOwner    Boolean            @default(false) @map("is_company_owner")
  active            Boolean            @default(true)
  createdAt         DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime           @updatedAt @map("updated_at") @db.Timestamptz(6)
  accountPreferences AccountPreference[]
  accountRoles      AccountRole[]
  business          Business           @relation(fields: [businessId], references: [id], onDelete: Cascade)
  auditoria         Auditoria[]
  tokensJwt         TokenJwt[]

  @@unique([businessId, email], name: "unique_business_email")
  @@index([businessId])
  @@index([email])
  @@index([businessId, email])
  @@index([active])
  @@index([isCompanyOwner])
  @@map("accounts")
}

model AccountPreference {
  businessId String    @map("business_id") @db.Uuid
  accountId  String    @map("account_id") @db.Uuid
  theme      ThemeEnum @default(light)
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  account    Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  business   Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@id([businessId, accountId])
  @@index([accountId])
  @@map("account_preferences")
}

model TokenJwt {
  businessId String   @map("business_id") @db.Uuid
  id         String   @id @default(uuid()) @db.Uuid
  accountId  String   @map("account_id") @db.Uuid
  expireIn   DateTime @map("expire_in") @db.Timestamptz(6)
  token      String
  active     Boolean  @default(true)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  account    Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([accountId])
  @@index([active])
  @@index([expireIn])
  @@index([token], type: Hash)
  @@map("tokens_jwt")
}

model Auditoria {
  businessId     String      @map("business_id") @db.Uuid
  id             String      @id @default(uuid()) @db.Uuid
  accountId      String?     @map("account_id") @db.Uuid
  description    String
  context        ContextEnum
  moment         DateTime    @default(now()) @db.Timestamptz(6)
  ipAddress      String?     @map("ip_address") @db.Inet
  userAgent      String?     @map("user_agent")
  additionalData Json?       @map("additional_data")
  account        Account?    @relation(fields: [accountId], references: [id])
  business       Business    @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([accountId])
  @@index([context])
  @@index([moment(sort: Desc)])
  @@index([businessId, moment(sort: Desc)])
  @@index([accountId, moment(sort: Desc)])
  @@index([businessId, context, moment(sort: Desc)])
  @@map("auditoria")
}

model Role {
  businessId   String        @map("business_id") @db.Uuid
  id           String        @id @default(uuid()) @db.Uuid
  name         String        @db.VarChar(100)
  color        String        @db.VarChar(7)
  active       Boolean       @default(true)
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime      @updatedAt @map("updated_at") @db.Timestamptz(6)
  accountRoles AccountRole[]
  business     Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  routeRoles   RouteRole[]

  @@unique([businessId, name], name: "unique_business_role_name")
  @@index([businessId])
  @@index([active])
  @@map("roles")
}

model AccountRole {
  businessId String   @map("business_id") @db.Uuid
  accountId  String   @map("account_id") @db.Uuid
  roleId     String   @map("role_id") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  account    Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([businessId, accountId, roleId])
  @@index([accountId])
  @@index([roleId])
  @@index([businessId, accountId])
  @@map("account_roles")
}

model RouteRole {
  businessId String   @map("business_id") @db.Uuid
  id         String   @id @default(uuid()) @db.Uuid
  route      String   @db.VarChar(100)
  roleId     String   @map("role_id") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([businessId, route, roleId], name: "unique_business_route_role")
  @@index([businessId])
  @@index([roleId])
  @@index([route])
  @@index([businessId, route])
  @@map("route_roles")
}

enum ThemeEnum {
  dark
  light
}

enum ContextEnum {
  auth_login
  auth_logout
  auth_recovery
  auth_deny
  auth_password_change
  account_create
  account_update
  account_deactivate
  account_role_add
  account_role_remove
  business_create
  business_update
  profile_update
  preferences_update
  theme_change
  session_create
  session_revoke
  role_create
  role_update
  role_delete
}
